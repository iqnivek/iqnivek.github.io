{"componentChunkName":"component---src-templates-blog-post-js","path":"/three-programming-talks/","webpackCompilationHash":"","result":{"data":{"site":{"siteMetadata":{"title":"Kevin Qi","author":"Kevin Qi"}},"markdownRemark":{"id":"92de3b5d-31d9-54e4-ae23-5e7d1e5f298f","excerpt":"Here are a couple talks with “ah-ha” moments that made me think about programming in a new way. Cheng Lou — “On the Spectrum of Abstraction” This talk is…","html":"<p>Here are a couple talks with “ah-ha” moments that made me think about programming in a new way.</p>\n<h2>Cheng Lou — “On the Spectrum of Abstraction”</h2>\n<p>This talk is particularly useful for library and framework authors, as it delves into how to think about the level of abstraction a library should provide. That doesn’t sound widely applicable at first, but as complex client side apps emerge, it’s becoming more and more common for frontend developers to write generic component libraries and to have to think about what functionality and what abstractions they provide.</p>\n<p>The idea that really resonated with me is the visualization of a tree of “use cases”, where leaf nodes are concrete use cases and parent nodes are the abstract tools that enable those use cases. If you create a tool that’s very specific and tailored, you only cover a few leaf nodes. If you create a tool that’s very abstract, you can potentially cover many leaf nodes, but there will then be additional layers of abstraction between the tool and the eventual leaf node use-case. A library should strike the balance between that immediate usefulness, and the ability to cover many “leaf nodes”. I found this to be an interesting and useful mental image to have.</p>\n<p>Another core idea was that enforcing restrictions on expressivity can be a beneficial tool. The corollary to that idea is that increasing expressiveness can be a negative trade-off. The prime example is how React approaches rendering vs. the approach of using templates. Templates are “data” — they can be fully expressed as serializable data structures, whereas React rendering can utilize functions, which can’t be expressed as data. Cheng said that this was actually a concession, not an inherently desired trait, which was something that was unexpected and thought provoking. By restricting expressiveness by using templates, frameworks like Ember can apply performance optimizations that React cannot. But the expressiveness gained with functions was worth the tradeoff.</p>","frontmatter":{"title":"","date":null,"description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/three-programming-talks/","previous":null,"next":null}}}